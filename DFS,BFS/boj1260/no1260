package study;
import java.util.*;
import java.io.*;

public class DFS {
	static int N, M, V; 
	

	public static void main(String[] args)throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String x = br.readLine();
		StringTokenizer st = new StringTokenizer(x, " ");
		N = Integer.parseInt(st.nextToken()); //정점의 개수
		M = Integer.parseInt(st.nextToken()); //간선의 개수
		V = Integer.parseInt(st.nextToken()); //간선이 연결하는 두 정점의 번호
		boolean[] visited = new boolean[N+1];
		
		ArrayList<Integer>[] ar = new ArrayList[N+1];
		for(int i=0; i<ar.length; i++) {
			ar[i]= new ArrayList<Integer>();
		}

		for(int i=0; i<M; i++) {
			st=new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			ar[a].add(b);
			ar[b].add(a);
			
		}
		
		for(int i=0; i<ar.length; i++	) {
			Collections.sort(ar[i]);
		}
		
		
		dfs(ar,visited,V);
		System.out.println();
		Arrays.fill(visited, false);
		bfs(ar,visited,V);

		
		
		// TODO Auto-generated method stub

	}

	 public static void dfs(ArrayList<Integer>[] ar, boolean[] visited, int now) {
	        visited[now] = true;
	        System.out.print(now + " ");
	        
	        for(int e : ar[now]) {
	            if(!visited[e]) {
	                dfs(ar, visited, e);
	            }
	        }
	    }

	public static void bfs(ArrayList<Integer>[] ar, boolean[] visited, int v) {
        Queue<Integer> q = new LinkedList<>();
        q.add(v);
        visited[v] = true;
        
        while(!q.isEmpty()) {
            v = q.poll();
            System.out.print(v + " ");
            
            for(int e : ar[v]) {
                if(!visited[e]) {
                    q.add(e);
                    visited[e] = true;
                }
            }
        }
    }
}
